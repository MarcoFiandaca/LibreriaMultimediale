

package libreria;

import java.awt.Component;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.SwingUtilities;

/**
 * 
 * 
 * Classe che implementa il frame principale del programma.
 * Esso mostra (in un Frame) gli elementi contenuti all'interno della libreria (in forma tabellare), permette l'aggiunta/eliminazione
 * di uno/più file multimediali all'interno della lista, permette la stampa, la modifica e la visualizzazione delle informazioni
 * degli elementi all'interno della libreria.
 * 
 * @author Giuseppe
 * @author Calogero
 * @author Marco
 */


public class MyNewFrame extends javax.swing.JFrame {

/**
 * VARIABILI.
 * 
 * -lib -> libreria mostrata dal Frame
 * -titolo -> Titolo del Frame
 * -modelloTabella -> modello per la visualizzazione in forma tabellare degli elementi all'interno della libreria
 * -scelta -> variabile utilizzata per scegliere il tipo(MP3,MP4,PDF) dell'elemento 
 * -nomeFile -> File dove viene salvata/caricata la libreria
 * -frameNotifica -> istanza della classe NotificaFrame che crea un Frame dove viene visualizzato il messaggio corrispondente
 *                   all'evento
 * -frameVisualizzaInfo -> istanza della classe VisualizzaInformazioni che crea un Frame che mostra tutte le informazioni
 *                         di rilievo a un elemento contenuto nella libreria.
 * -frameDialogo -> istanza della classe Dialogframe (utilizzato per il salvataggio della libreria) che crea una finestra 
 *                  di dialogo dove viene mostrato il messaggio di avviso relativo alla sovrascrizione del file e permette all'utente
 *                  di scegliere se proseguire o no.
 * -frameRicerca -> istanza della classe RicercaFrame che crea un Frame che mostra (in forma tabellare) l'elemento/i cercati
 * -elementoTrovato -> variabile che rappresenta elemento contenuto all'interno della libreria che si sta cercando
 * -libRicerca -> libreria che contiene gli elementi cercati
 * -stringaRicerca -> Stringa (che figura: Titolo/Anno/Autore) inserita dall'utente per la ricerca 
 *                    di un elemento contenuto all'interno della libreria
 * -indice -> variabile intera utilizzata nella ricerca per scorrere ogni elemento contenuto all'interno della libreria
 * -trovato -> Variabile booleana che indica se l'elemento cercato è stato trovato (trovato = true) o no (trovato = false)
 
 */ 
    
    private MyLibreria lib;
    private final String titolo = "Libreria Multimediale";
    private MyTableModel modelloTabella;
    private int scelta;
    private final String nomeFile = "Elementi_Libreria.dat";
    private NotificaFrame frameNotifica;
    private VisualizzaInformazioni frameVisualizzaInfo;
    private DialogFrame frameDialogo;
    
    private RicercaFrame frameRicerca;
    private Elemento  elementoTrovato;
    private MyLibreria libRicerca;
    private String stringaRicerca;
    private int indice;
    private boolean trovato;
   
    
    

/**
 * Creates new form MyNewFrame
 * @param lib
 */
    public MyNewFrame(MyLibreria lib) {
        setIconImage(new ImageIcon(getClass().getResource("/immagini libreria/Icon.png")).getImage());
        setLocationRelativeTo(null);
        this.lib=lib;
        initComponents(); 
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem7 = new javax.swing.JMenuItem();
        jPopupMenu = new javax.swing.JPopupMenu();
        MenuItemElimina = new javax.swing.JMenuItem();
        MenuItemVisualizzaInfo = new javax.swing.JMenuItem();
        jScrollPane = new javax.swing.JScrollPane();
        modelloTabella = new MyTableModel(lib);
        jTable = new javax.swing.JTable();
        jTextCerca = new javax.swing.JTextField();
        jButtonCerca = new javax.swing.JButton();
        jMenuBar = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuItemBrano = new javax.swing.JMenuItem();
        jMenuItemVideo = new javax.swing.JMenuItem();
        jMenuItemEbook = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItemFolderBrano = new javax.swing.JMenuItem();
        jMenuItemFolderVideo = new javax.swing.JMenuItem();
        jMenuItemFolderEbook = new javax.swing.JMenuItem();
        jMenuItemStampa = new javax.swing.JMenuItem();
        jMenuEdit = new javax.swing.JMenu();
        jMenuItemSalvaLib = new javax.swing.JMenuItem();
        jMenuItemCaricaLib = new javax.swing.JMenuItem();

        jMenuItem7.setText("jMenuItem7");

        MenuItemElimina.setText("Elimina");
        MenuItemElimina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemEliminaActionPerformed(evt);
            }
        });
        jPopupMenu.add(MenuItemElimina);

        MenuItemVisualizzaInfo.setText("Visualizza info ");
        MenuItemVisualizzaInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemVisualizzaInfoActionPerformed(evt);
            }
        });
        jPopupMenu.add(MenuItemVisualizzaInfo);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(titolo.toString());

        jTable.setModel(modelloTabella);
        jTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableMouseClicked(evt);
            }
        });
        jScrollPane.setViewportView(jTable);

        jTextCerca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextCercaActionPerformed(evt);
            }
        });

        jButtonCerca.setText("Cerca");
        jButtonCerca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCercaActionPerformed(evt);
            }
        });

        jMenuFile.setText("File");

        jMenu3.setText("Aggiungi");

        jMenuItemBrano.setText("Brano Musicale");
        jMenuItemBrano.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemBranoActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItemBrano);

        jMenuItemVideo.setText("Video");
        jMenuItemVideo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemVideoActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItemVideo);

        jMenuItemEbook.setText("E-Book");
        jMenuItemEbook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemEbookActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItemEbook);

        jMenuFile.add(jMenu3);

        jMenu4.setText("Aggiungi cartella");

        jMenuItemFolderBrano.setText("Brani Musicali");
        jMenuItemFolderBrano.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFolderBranoActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItemFolderBrano);

        jMenuItemFolderVideo.setText("Video");
        jMenuItemFolderVideo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFolderVideoActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItemFolderVideo);

        jMenuItemFolderEbook.setText("E-Books");
        jMenuItemFolderEbook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFolderEbookActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItemFolderEbook);

        jMenuFile.add(jMenu4);

        jMenuItemStampa.setText("Stampa");
        jMenuItemStampa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemStampaActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemStampa);

        jMenuBar.add(jMenuFile);

        jMenuEdit.setText("Edit");

        jMenuItemSalvaLib.setText("Salva libreria");
        jMenuItemSalvaLib.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSalvaLibActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemSalvaLib);

        jMenuItemCaricaLib.setText("Carica libreria");
        jMenuItemCaricaLib.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCaricaLibActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemCaricaLib);

        jMenuBar.add(jMenuEdit);

        setJMenuBar(jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 226, Short.MAX_VALUE)
                        .addComponent(jTextCerca, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonCerca, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextCerca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonCerca))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

/**
 * Metodo che gestisce l'aggiunta di un branoMusicale.
 * Gestisce l'inserimento di un MP3 richiamando un istanza della classe Aggiungiframe. 
 * @param evt -> pressione su jMenuItemBrano
 */
    private void jMenuItemBranoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemBranoActionPerformed
        
        AggiungiFrame agg = new AggiungiFrame(1,lib,modelloTabella);
        agg.setVisible(true);
        
    }//GEN-LAST:event_jMenuItemBranoActionPerformed

/**
 * Metodo che gestisce l'aggiunta di un Video.
 * Gestisce l'inserimento di un video richiamando un istanza della classe Aggiungiframe
 * @param evt -> pressione su jMenuItemVideo
 */
    private void jMenuItemVideoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemVideoActionPerformed
        
        AggiungiFrame agg = new AggiungiFrame(2,lib,modelloTabella);
        agg.setVisible(true);
        
    }//GEN-LAST:event_jMenuItemVideoActionPerformed

/**
 * Metodo che gestisce l'aggiunta di un Ebook.
 * Gestisce l'inserimento di un PDF richiamando un istanza della classe Aggiungiframe 
 * @param evt -> pressione su jMenuItemEbook
 */
    private void jMenuItemEbookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEbookActionPerformed
        // TODO add your handling code here:
        AggiungiFrame agg = new AggiungiFrame(3,lib,modelloTabella);
        agg.setVisible(true);
       
    }//GEN-LAST:event_jMenuItemEbookActionPerformed

/**
 * Metodo che gestisce il salvataggio della libreria.
 * Scrive gli elementi contenuti nella libreria sul file "nomeFile".
 * @param evt -> pressione su jMenuItemSalvaLib
 */
    private void jMenuItemSalvaLibActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSalvaLibActionPerformed
        
        boolean sovrascrivi = false;
        
        if(lib.IsEmpty() == 1){
            sovrascrivi = true;
        } else if(lib.IsEmpty() == 2){
            frameDialogo = new DialogFrame(this,true);
            sovrascrivi = frameDialogo.getRisposta(); 
        }
        
        
        
        
        if(sovrascrivi){ 
            //salvo il numero di elementi della libreria contenuti nell'array
            for(int i=0; i<lib.size();i++)
           
                lib.get(i);
            FileOutputStream OutputFile = null;
            try {
                
            OutputFile = new FileOutputStream (nomeFile);
            
                    
        } catch (FileNotFoundException ex) {
            frameNotifica = new NotificaFrame("File non trovato",this,true);
        }
                     
            ObjectOutputStream writeObject= null;
            try{
                writeObject = new ObjectOutputStream(OutputFile);
                writeObject.writeObject(lib);
                writeObject.flush();
                writeObject.close();
                 
                
            }catch (IOException e) {
                frameNotifica = new NotificaFrame("Errore in scrittura",this,true);                                           
            }
            frameNotifica = new NotificaFrame("Salvataggio Completato!",this,true);
        } 
    
    }//GEN-LAST:event_jMenuItemSalvaLibActionPerformed

/**
 * Metodo che gestice il caricamento della libreria precedentemente salvata.
 * Carica la libreria precedentemente salvata sul  file "nomeFile".
 * @param evt -> jMenuItemCaricaLib
 */
    private void jMenuItemCaricaLibActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCaricaLibActionPerformed
        
        boolean Controllo = false;
        String messaggio = "Caricamento riuscito!";
        FileInputStream InFile = null;
        ObjectInputStream read = null;
        
        if (new File(nomeFile).exists()){
            Controllo = true;
        }
        else{
            Controllo = false;
            messaggio = "Nessuna libreria salvata precedentemente";
        }
        
        if(Controllo){
            try {
                InFile = new FileInputStream(nomeFile);
            
            } catch (FileNotFoundException e) {
                messaggio = "ERRORE Non è stato possibile aprire il file per il caricamento!";
                Controllo = false;
                }
        }
        if(Controllo){
            lib = null;
            try{
                read = new ObjectInputStream (InFile);
                lib = (MyLibreria) (read.readObject());
                read.close();
            }catch(IOException ex){
                messaggio="ERRORE Non è stato possibile leggere il file per il caricamento!";
            }catch(ClassNotFoundException ex) {
                messaggio="ERRORE Classe non trovata ";
            }
            
        frameNotifica = new NotificaFrame (messaggio,this,true);    
        modelloTabella = new MyTableModel(this.lib);
        jTable.setModel(modelloTabella);
            
        }
    
    }//GEN-LAST:event_jMenuItemCaricaLibActionPerformed

/**
 * Metodo che gestisce le operazioni da effettuare per la ricerca.
 * La ricerca avviene per Titolo/Anno/Autore sulla libreria: 
 * 
 * -Quando viene immessa la Stringa per effettuare la ricerca se vengono trovati elementi all'intero della
 *  libreria, viene aperta una finestra di dialogo che li visualizza.
 * 
 * -Se la ricerca non va a buon fine viene visualizzata una finestra di dialogo dove viene visualizzato
 * nun messaggio che indica la mancata presenza del/degli elementi cercati
 * @param evt -> pressione su jButtonCerca
 */
    private void jButtonCercaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCercaActionPerformed
        trovato = false;
        elementoTrovato = null;
        indice = 0;
        libRicerca = new MyLibreria();
        stringaRicerca = jTextCerca.getText();
       
        
        while(indice < lib.size()){
            elementoTrovato = lib.get(indice);
            
            if(elementoTrovato.getTitolo().equals(stringaRicerca)||elementoTrovato.getAutore().equals(stringaRicerca)|| elementoTrovato.getAnno().equals(stringaRicerca)){
               
                libRicerca.inserisci(elementoTrovato);
                jTable.changeSelection(indice, 1, false, false);
                indice++;
             
            } else{
               indice++;
            }
        }
        if(libRicerca.size()!=0){
            trovato = true;
            frameRicerca = new RicercaFrame(this,true,libRicerca);
        } else {
            trovato = false;
            frameNotifica = new NotificaFrame("Nessun elemento trovato",this,true);
        }
    }//GEN-LAST:event_jButtonCercaActionPerformed

/**
 * Metodo che gestisce la stampa della libreria. 
 * @param evt -> click su jMenuItemStampa
 */
    private void jMenuItemStampaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemStampaActionPerformed
        try {
            if(!jTable.print())  
                frameNotifica = new NotificaFrame("Stampa annullata dall'utente",this,true);
            
        }catch(java.awt.print.PrinterException e) {
            frameNotifica = new NotificaFrame("ERRORE,impossibile stampare ",this,true);
        }
    }//GEN-LAST:event_jMenuItemStampaActionPerformed

/**
 * Metodo che gestisce le operazioni di click sulla tabella (jTable1). 
 * -se è un doppio click esegue la riproduzione dell'elemento (per il brano musicale si apre il player da noi creato
 *  mentre per Ebook e Video si apre l'applicazione di default);
 * -se è un click destro apre jPopupMenu ed è possibile scegliere se eliminare l'elemento o visualizzarne le informazioni
 * @param evt -> click su un elemento in jTable1
 */
    private void jTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableMouseClicked
        int pos = jTable.getSelectedRow();
        SetScelta(pos);
     
        if(SwingUtilities.isRightMouseButton(evt)){ 
            
            jPopupMenu.show(jTable, evt.getX(),evt.getY());
          
        } else 
            if(evt.getClickCount()== 2 ){
                
                switch(scelta){
                    case 0://Video
                       lib.get(pos).play();
                       break;
                    case 1://Brano musicale
                        PlayerFrame playerframe;
                        try {
                            playerframe = new PlayerFrame(lib.get(pos).getPercorso(),lib.get(pos).getTitolo());
                        }catch (IOException ex) {
                            frameNotifica = new NotificaFrame("Errore apertura Player",this,true);
                        }
                        break;
                    case 2://E_booK
                        lib.get(pos).play();
                        break;
                    default:
                        break;
                }   
            }
  
    }//GEN-LAST:event_jTableMouseClicked

/**
 * Metodo che gestisce l'aggiunta di tutti i brani contenuti in una cartella.
 * Aggiunge tutti i braniMusicali contenuti in una cartella selezionata mediante un istanza della classe
 * FolderChooser
 * @param evt -> pressione su jMenuItemFolderBrano
 */
    private void jMenuItemFolderBranoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFolderBranoActionPerformed
        
        FolderChooser fol = new FolderChooser(1, lib, modelloTabella,this);
        
    }//GEN-LAST:event_jMenuItemFolderBranoActionPerformed

/**
 * Metodo che gestisce l'aggiunta di tutti i video contenuti in una cartella.
 * Aggiunge tutti i video contenuti in una cartella selezionata mediante un istanza della classe
 * FolderChooser
 * @param evt -> pressione su jMenuItemFolderVideo
 */
    private void jMenuItemFolderVideoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFolderVideoActionPerformed
        
        FolderChooser fol = new FolderChooser(2, lib, modelloTabella,this);
        
    }//GEN-LAST:event_jMenuItemFolderVideoActionPerformed

/**
 * Metodo che gestisce l'aggiunta di tutti gli e-book contenuti in una cartella.
 * Aggiunge tutti gli Ebook contenuti in una cartella selezionata mediante un istanza della classe
 * FolderChooser
 * @param evt -> pressione su jMenuItemFolderEbook
 */
    private void jMenuItemFolderEbookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFolderEbookActionPerformed
        
        FolderChooser fol = new FolderChooser(3, lib, modelloTabella,this);
        
    }//GEN-LAST:event_jMenuItemFolderEbookActionPerformed

    
    private void jTextCercaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextCercaActionPerformed

    }//GEN-LAST:event_jTextCercaActionPerformed

/**
 * Metodo che permette l'eliminazione di un elemento contenuto all'interno della libreria 
 * @param evt -> pressione su MenuItemElimina
 */
    private void MenuItemEliminaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemEliminaActionPerformed
        
        int pos = jTable.getSelectedRow();
        SetScelta(pos);        
        lib.elimina(pos);        
        jPopupMenu.setVisible(false);
        modelloTabella.aggiorna();
   
    }//GEN-LAST:event_MenuItemEliminaActionPerformed

/**
 * Metodo che permette la visualizzazione delle informazioni relative ad un elemento contenuto all'interno
 * della libreria alla pressione di MenuItemVisualizzaInfo.
 * @param evt -> pressione su MenuItemVisualizzaInfo
 */
    private void MenuItemVisualizzaInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemVisualizzaInfoActionPerformed
        
        int pos= jTable.getSelectedRow();
        frameVisualizzaInfo = new VisualizzaInformazioni (lib,pos,modelloTabella);
        
    }//GEN-LAST:event_MenuItemVisualizzaInfoActionPerformed

/**
 * Metodo che imposta la variabile scelta per l'apertura del file in base al tipo
 * @param pos 
 */
    private void SetScelta(int pos){
        
        if(null != lib.get(pos).getTipo()){
            switch (lib.get(pos).getTipo()) {
            case "MP4":
                this.scelta = 0;
                break;
            case "MP3":
                this.scelta = 1;
                break;
            case "PDF":
                this.scelta = 2;
                break;
            default:
                break;
            }
        }
       
    }
    
     
    
   
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem MenuItemElimina;
    private javax.swing.JMenuItem MenuItemVisualizzaInfo;
    private javax.swing.JButton jButtonCerca;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenu jMenuEdit;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItemBrano;
    private javax.swing.JMenuItem jMenuItemCaricaLib;
    private javax.swing.JMenuItem jMenuItemEbook;
    private javax.swing.JMenuItem jMenuItemFolderBrano;
    private javax.swing.JMenuItem jMenuItemFolderEbook;
    private javax.swing.JMenuItem jMenuItemFolderVideo;
    private javax.swing.JMenuItem jMenuItemSalvaLib;
    private javax.swing.JMenuItem jMenuItemStampa;
    private javax.swing.JMenuItem jMenuItemVideo;
    private javax.swing.JPopupMenu jPopupMenu;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JTable jTable;
    private javax.swing.JTextField jTextCerca;
    // End of variables declaration//GEN-END:variables
}
